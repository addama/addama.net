Scrum
	http://scrum.org
	Agile framework that prescribes some commonly confusing or contentious elements of structure in a simple and minimalistic way
	Reduces roles to only 3. Reduces meetings/events to only a handful, all of which have a maximum time limit and minimal required participants.
	Puts the power to estimate and do the work on the Development Team itself, allowing little to no pressure from entities outside of it
	Separates work into Sprints, which are rigid time boxes in which all work (to include testing, etc) can be completed
	Enforces the use of a Scrum Master, whose job is to educate and facilitate the team's use and understanding of Scrum - this is often an optional role that serves as a consultant in other processes
	Based on continuously evaluating performance and being honest and transparent about both failings and successes, which can be lessons used to improve performance on the next iteration

SAFe (Scaled Agile Framework)
	https://www.scaledagileframework.com/
	As its name suggests, SAFe is a scaled up version of Scrum, applying Scrum process and principles to 4 levels of program management, built on Scrum at its lowest level
	Multiple Scrum Teams work together to plan what will go into a new release (called a Train; a Sprint of Sprints, effectively), then plan their own sprints based on that backlog
	Each level of the process essentially contains the elements of Scrum: A PO, SM, and Dev Team - although the dev team as you go higher potentially represents the efforts of hundreds of developers and their teams
	Demos are regularly given for individual Sprints as well as the entirety of the package to ensure that teams are delivering their Sprints in concert with eachother
	When the release timebox has expired, an iteration is complete, and any unfinished Sprint items are put in the next Train
	This is the source of the "Epic", which is a product of products, or an organizational vision direction, and "Enablers" which are Sprints or products that enable the existence of further sprints or products

Kanban
	https://en.wikipedia.org/wiki/Kanban_(development)
	Created by Toyota in the 40s to improve their production and engineering process
	Focuses on flexible, just-in-time resource management, along with a specific visialization system - the Kanban Board
	Tasks are written on cards and placed into lanes, which are various phases of a process. As work is completed, cards move between the lanes
	Workers or teams that correspond to each lane pull cards from their lane to work on them as they have the time and manpower to do so
	While tasks can be pulled into stages of work as needed, Kanban enforces strict limits on how much work can exist in that stage at any given time
	Relies on metrics, which are easy to track when work is divided and presented on the Board, to provide avenues for continuous improvement

Scrumban
	https://leankit.com/learn/agile/what-is-scrumban/
	A hybridization between Scrum and Kanban that attempts to provide the structure of Scrum with the work-flow process and work visualization of Kanban
	Essentially just unravels the Development Team and Sprint concept portions of Scrum, replacing it with a continuous-flow, queue-pulling work system from Kanban
	Originally created as a middle-ground for teams converting from Scrum to Kanban
	Can also be used as a loose term for "We use Scrum, but we visualize the sprint backlog items on a Kanban board", though this isn't common
Burndown charts
	A chart to track the amount of work being completed over an amount of time, or a series of iterations, as compared to both time and expected amount of work
	Typically in Scrum, the graph will represent total amount of User Story Points completed or added (via new Sprint Backlog items) per day of the Sprint
	A series of trend lines are also typically used: One to represent ideal burndown, which is generally linear; and another to represent the forecast based on previous velocity
	The chart is fairly simple, and has few required data points, which makes it easy to read by all team members
	They can be used for good or for evil; their simplicity can often be taken at face value, forgetting that there is much more to the story than just what the chart shows
	Burndown charts can be used at nearly any level so long as there is an effort pool and an amount of time in which to finish that effort
	Allows for the generation of the Velocity metric, which represents the amount of effort (points usually) that a team can complete in a Sprint - this should trend toward a stable value over time as the team gets better at estimating and accomplishing work

User stories
	"As a _, I want _, so that _"
	Technique to express traditional requirements in terms of the customer, allowing development to focus on what actually gives the customer value
	Serves as a seed for expansion of a feature or concept to develop a full understanding of what that need entails
	Because of the prescribed format, it becomes easier to know the difference between a functional requirement and a non-functional requirement

Story Points and Sizing
	In Agile, estimating effort using concrete units like hours is difficult and too rigid, so a self-relative scale is used to express the size of that work relative to the work adjacent to it
	Typically the team first orders user stories relative to eachother, simply ordering them in percieved effort, then assigned a point value along a scale
	A common scale is Fibonacci numbers: 1, 2, 3, 5, 8, 13, 21, which allows for user stories to "fit together" and add up to a larger estimated story
	Story points are abstract, and are more to express relative difficulty/cost than absolute
	Sized based on amount of work, complexity, risk, and time
	Important to retain a history of tasks and their estimates so that you can learn from those experiences to know if your estimates are correct

Planning Poker
	When determining Story Points for a User Story, each member of the development team individually considers the work they think each task involves
	The team compares their estimates of work, and outliers give rationale behind their estimate - why do I think it's easier or harder than the rest of you?
	Must be kept high-level, as the user story will be decomposed later - this is only for the work estimate based on what is known now

XP
	Agile framework, very strictly defined
	TDD and unit testing
	Requires rockstar developers
	Pair programming
	Story points
	Requires XP Coaches
	Continuous delivery
	Teams are "siloed", sitting together
	~1% of use

Lean
	https://www.lean.org/
	Generating standards as basis for comparison by conducting experiments in pursuit of betterness
	Infusing value into what's already being done so that redundancies and support structures don't have to exist
	Values forward momentum in change and production over anything else
	Primarily concerned with "value streams", the path that resources must follow to end up as a product for the consumer
	Plan Do Check Act
	More of a way of thinking that has a lot of external dogma applied to it to make it actionable

Agile
	https://agilemanifesto.org/
	Consists of only a manifesto and 12 principles
	Focuses more on collaboration, people, and the final product rather than rigid schedules, documentation, and process theory
	Frequent releases, and riding new requirements out as they come in
	Promotes self-organizing cross-functional teams and giving the people with the skills and ideas an environment to enact those things
	Regular reflection

Agile-Lean Relationship
	Agile and Lean coexist when Agile teams use Lean thinking and processes to improve themselves and their Agile process
	Agile and Lean coexist when Lean teams implement Agile methodology to define how they do their development and releases
	Both are abstract mindsets, but Lean focuses on self-improvement and eliminating waste, thereby increasing value, while Agile focuses on empowering workers and resisting rigidness, thereby increasing value
	Lean thinking may lead to adopting Agile methodology if your comparable process is found to be wasteful, and an experiment causes you to adopt Agile
	Agile methodology may lead to adopting Lean principles because both value continuous improvement, and Lean provides a set of rules and concepts to follow to pursue that improvement
	Agile can be said to be an implementation of Lean thinking

